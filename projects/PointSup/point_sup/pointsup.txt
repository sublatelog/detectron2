PointSupDatasetMapper(self, dataset_dict)

    annos = [transform_instance_annotations(obj, transforms, image_shape,) for obj in dataset_dict.pop("annotations") if obj.get("iscrowd", 0) == 0]
    
    instances = annotations_to_instances(annos, image_shape, sample_points=self.sample_points,)
        for i, _ in enumerate(annos):
            point_coords_wrt_image = np.array(annos[i]["point_coords"])
            point_labels_wrt_image = np.array(annos[i]["point_labels"])

            # random_indices
            # sample_points:size
            # replace:値の重複を許すかどうか。
            random_indices = np.random.choice(point_coords_wrt_image.shape[0], sample_points, replace=point_coords_wrt_image.shape[0] < sample_points,).astype(int)

            # get
            point_coords_wrt_image = point_coords_wrt_image[random_indices]
            point_labels_wrt_image = point_labels_wrt_image[random_indices]


MaskRCNNConvUpsamplePointSupHead.forward(x, instances)
    x = self.layers(x)
    
    proposal_boxes = [x.proposal_boxes for x in instances]
    assert N == np.sum(len(x) for x in proposal_boxes)
    
    point_coords, point_labels = get_point_coords_from_point_annotation(instances)
        for instances_per_image in instances:
        
            # coordinate
            # instances
            #   attr:gt_point_coords
            #   attr:gt_point_labels
            point_coords = instances_per_image.gt_point_coords.to(torch.float32)               
                    
            
            # label
            point_labels = instances_per_image.gt_point_labels.to(torch.float32).clone()
            proposal_boxes_per_image = instances_per_image.proposal_boxes.tensor

            # 
            point_coords_wrt_box = get_point_coords_wrt_box(proposal_boxes_per_image, point_coords)


            point_coords_list.append(point_coords_wrt_box)
            point_labels_list.append(point_labels)
    
    mask_logits = point_sample(x, point_coords, align_corners=False,)
    
    loss_mask = roi_mask_point_loss(mask_logits, instances, point_labels)
